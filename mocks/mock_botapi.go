// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fsantiag/mussum/adapter (interfaces: BotIface)

// Package mocks is a generated GoMock package.
package mocks

import (
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBotIface is a mock of BotIface interface
type MockBotIface struct {
	ctrl     *gomock.Controller
	recorder *MockBotIfaceMockRecorder
}

// MockBotIfaceMockRecorder is the mock recorder for MockBotIface
type MockBotIfaceMockRecorder struct {
	mock *MockBotIface
}

// NewMockBotIface creates a new mock instance
func NewMockBotIface(ctrl *gomock.Controller) *MockBotIface {
	mock := &MockBotIface{ctrl: ctrl}
	mock.recorder = &MockBotIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBotIface) EXPECT() *MockBotIfaceMockRecorder {
	return m.recorder
}

// DeleteMessage mocks base method
func (m *MockBotIface) DeleteMessage(arg0 tgbotapi.DeleteMessageConfig) (tgbotapi.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", arg0)
	ret0, _ := ret[0].(tgbotapi.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMessage indicates an expected call of DeleteMessage
func (mr *MockBotIfaceMockRecorder) DeleteMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockBotIface)(nil).DeleteMessage), arg0)
}

// GetUpdatesChan mocks base method
func (m *MockBotIface) GetUpdatesChan(arg0 tgbotapi.UpdateConfig) (tgbotapi.UpdatesChannel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdatesChan", arg0)
	ret0, _ := ret[0].(tgbotapi.UpdatesChannel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpdatesChan indicates an expected call of GetUpdatesChan
func (mr *MockBotIfaceMockRecorder) GetUpdatesChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdatesChan", reflect.TypeOf((*MockBotIface)(nil).GetUpdatesChan), arg0)
}

// KickChatMember mocks base method
func (m *MockBotIface) KickChatMember(arg0 tgbotapi.KickChatMemberConfig) (tgbotapi.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KickChatMember", arg0)
	ret0, _ := ret[0].(tgbotapi.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KickChatMember indicates an expected call of KickChatMember
func (mr *MockBotIfaceMockRecorder) KickChatMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KickChatMember", reflect.TypeOf((*MockBotIface)(nil).KickChatMember), arg0)
}

// Send mocks base method
func (m *MockBotIface) Send(arg0 tgbotapi.Chattable) (tgbotapi.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(tgbotapi.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send
func (mr *MockBotIfaceMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockBotIface)(nil).Send), arg0)
}

// UserName mocks base method
func (m *MockBotIface) UserName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserName")
	ret0, _ := ret[0].(string)
	return ret0
}

// UserName indicates an expected call of UserName
func (mr *MockBotIfaceMockRecorder) UserName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserName", reflect.TypeOf((*MockBotIface)(nil).UserName))
}
